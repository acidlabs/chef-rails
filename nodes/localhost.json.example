{
// This is the list of the recipes that are going to be cooked.
  "run_list": [
    "recipe[sudo]",
    "recipe[apt]",
    "recipe[build-essential]",
    "recipe[ohai]",
    "recipe[runit]",
    "recipe[git]",
    "recipe[postgresql::server]",
    "recipe[postgresql::server-dev]",
    "recipe[postgresql::libpq]",
    "recipe[nginx::default]",
    "recipe[nginx::apps]",
    "recipe[ruby]",
    "recipe[chef-rails]"
  ],

// You must define who’s going to be the user(s) you’re going to use for deploy.
  "authorization": {
    "sudo": {
      "groups":       ["admin", "wheel", "sysadmin"],
      "users":        ["vagrant"],
      "passwordless": true
    }
  },

// You must define the username and password for postgres.
  "postgresql": {
    "users": [
      {
        "username"  : "vagrant",
        "password"  : "asdf1234",
        "superuser" : true,
        "createdb"  : true,
        "login"     : true
      }
    ],

// If you want to create the databases manually, you can specify them here. otherwise,
// you can comment the databases array if you want.
    "databases": [
      {
        "name"      : "app1",
        "owner"     : "vagrant",
        "template"  : "template0",
        "encoding"  : "utf8",
        "locale"    : "en_US.UTF8"
      },
      {
        "name"      : "app2",
        "owner"     : "vagrant",
        "template"  : "template0",
        "encoding"  : "utf8",
        "locale"    : "en_US.UTF8"
      }
    ],

// This is for postgres to trust in local connections. You should leave this as is
// if you’re not sure what you’re doing.
    "pg_hba": [
      "local  all   all                 trust",
      "host   all   all   127.0.0.1/32  md5",
      "host   all   all   ::1/128       md5"
    ]
  },

// You must specify the ubuntu distribution by it’s name to configure the proper version
// of nginx, otherwise it’s going to fail.
  "nginx": {
    "distribution": "oneiric",
    "components":   ["main"],
// Here you should define all the apps you want nginx to serve for you in the server.
    "apps": {
      "app1": {
        "listen"     : [80],
// Specify a server name
        "server_name": "app1.example.com",
// Specify a public path
        "public_path": "/home/vagrant/public_html/app1/current/public",
// You need to give a name to your upstream server and the path to it's sock file(s).
// To give you an example: If you're using Unicorn and declaring the sock file to be
// app1.sock, you should declare the upstream directive as below.
        "upstreams"  : [
          {
            "name"    : "app1",
            "servers" : ["unix:/home/vagrant/public_html/app1/shared/tmp/app1.sock max_fails=3 fail_timeout=1s"]
          }
        ],
        "locations": [
          {
            "path": "/",
            "directives": [
              "proxy_set_header X-Forwarded-Proto $scheme;",
              "proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
              "proxy_set_header X-Real-IP $remote_addr;",
              "proxy_set_header Host $host;",
              "proxy_redirect off;",
              "proxy_http_version 1.1;",
              "proxy_set_header Connection '';",
// And never forget to set proxy pass to the upstream you declared above.
              "proxy_pass http://app1;"
            ]
          }
        ]
      },
// Example for Thin server
      "app2": {
        "listen"     : [80],
        "server_name": "app2.example.com",
        "public_path": "/home/vagrant/public_html/app2/current/public",
        "upstreams"  : [
          {
            "name"    : "app2",
            "servers" : [
              "localhost:3000 max_fails=3 fail_timeout=1s",
              "localhost:3001 max_fails=3 fail_timeout=1s",
              "localhost:3002 max_fails=3 fail_timeout=1s",
              "localhost:3003 max_fails=3 fail_timeout=1s"
            ]
          }
        ],
        "locations": [
          {
            "path": "/",
            "directives": [
              "proxy_set_header X-Forwarded-Proto $scheme;",
              "proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
              "proxy_set_header X-Real-IP $remote_addr;",
              "proxy_set_header Host $host;",
              "proxy_redirect off;",
              "proxy_http_version 1.1;",
              "proxy_set_header Connection '';",
              "proxy_pass http://app2;"
            ]
          }
        ]
      }
    }
  },

// The ruby version you’re going to use. Valid values, by now, are 1.8, 1.9 and 1.9.1
  "languages": {
      "ruby": {
          "default_version": "1.9.1"
      }
  },

// Finally, declare all the system packages required by the services and gems you’re using in your apps.
// To give you an example: If you’re using nokogiri, the native extensions compilation will fail unless you have installed the development headers declared below.
  "chef-rails": {
    "packages": ["libxml2-dev", "libxslt1-dev", "libncurses5-dev", "libncurses5-dev"]
  }
}